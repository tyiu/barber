{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Barber\ud83d\udc88 \u00b6 A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating. Press \u00b6 Meet Barber\ud83d\udc88: the best way to manage your Mustache Why? \u00b6 An application will often have hundreds of user viewable strings to power UI, notifications, emails, and other text based user interactions. This leads to many questions about the how to achieve the desired functionality of these user viewable strings: These strings may want to be personalizable! Thus the string would now have to be a template that can render with a data blob unique to each user to produce a personalized string. How can we check that the fillable openings in templates have corresponding values in the data blob? How can templates and data blobs be validated at compile time to protect against runtime exceptions or user visible bugs? What if we want to pass around not just a single template string, but a collection of template strings for more complex documents? How could we support emails that have a subject, body, recipient, primary button\u2026? What about different languages? Could the same unique data blob could be used to support templates in different languages? What about time or money that differ between countries that even share the same language (ie. 12 vs 24 hour time)? How could that formatting localization be provided? To answer the above questions, we built Barber\ud83d\udc88. A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating. Getting Started \u00b6 To get started using Barber, skim below to understand the different elements used to safely render your localized, fillable, themed documents using Mustache templating. Releases \u00b6 Our change log has release history. API is subject to change. implementation ( \"app.cash.barber:barber:0.3.3\" ) Snapshot builds are available . DocumentData \u00b6 DocumentData is the data that is used to render a template. In Barber, this is defined as a data class making it easy to use in Kotlin. // Define DocumentData data class RecipientReceipt ( val sender : String , val amount : String , val cancelUrl : String , val deposit_expected_at : Instant ) : DocumentData To render a template, for example \"{{sender}} sent you {{amount}}\" , an instance of the above DocumentData could be passed in to fill the fillable openings in the template. Document \u00b6 The final fields of the output, rendered document. For simple documents, this may be a single field. // Define Document data class TransactionalSmsDocument ( val sms_body : String ) : Document For more complex documents that may be used in further processing, there may be multiple fields, which can be nullable. data class TransactionalEmailDocument ( val subject : String , val headline : String , val short_description : String , val primary_button : String? , val primary_button_url : String? , val secondary_button : String? , val secondary_button_url : String? ) : Document DocumentTemplate \u00b6 A DocumentTemplate is the glue that connects the DocumentData to the Document. It contains: - fields: - keys fulfill all the non-nullable keys of the Document targets - values are Mustache templates that are rendered with the passed in source DocumentData - source: DocumentData that can support all fillable templates in fields - targets: Document s that the DocumentTemplate can render to - locale: Locale for the language of the fields templates val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US ) Barber \u00b6 A Barber is typed to the DocumentData -> Document relationship that it knows how to render. Amy knows how to cut blonde hair into a Fu Manchu mustache. Joe knows how to trim brown hair into a soul patch mustache. // A Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms : Barber < RecipientReceipt , TransactionalSmsDocument > Barbershop \u00b6 A Barbershop contains all possible Barbers based on the installed DocumentData , DocumentTemplate , and Document s. Each Barber knows how to handle a different combination of DocumentData -> Document . You can call barbershop.getBarber<RecipientReceipt, TransactionalSmsDocument>() to get the Barber that can handle rendering a RecipientReceipt into a TransactionalSmsDocument . // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument > () You want a soul patch and have brown hair, get Joe! You want a Fu Manchu and have blonde hair, get Amy! You can also get a Map of all Barbers using barbershop.getAllBarbers() . // Get all Barbers val allBarbers : Map < BarberKey , Barber < DocumentData , Document >> = barbershop . getAllBarbers () Note: BarberKey is a data class that let\u2019s us lookup by both DocumentData and Document . BarbershopBuilder \u00b6 A Java style Builder that installs all of the above Barber elements and returns a pre-compiled and validated Barbershop. Install DocumentData and DocumentTemplate pairs with .installDocumentTemplate<RecipientReceipt>(recipientReceiptSmsDocumentTemplateEN_US) . Install Document with .installDocument<TransactionalSmsDocument>() Optionally set a custom LocaleResolver with .setLocaleResolver(MapleSyrupOrFirstLocaleResolver()) Optionally set a default BarberFieldEncoding for non-annotated Document fields with .setDefaultBarberFieldEncoding(STRING_PLAINTEXT) Optionally configure warning validation strictness with .setWarningsAsErrors() Return the finished Barbershop with .build() as the final method call on BarbershopBuilder. val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateEN_US ) . installDocument < TransactionalSmsDocument > () . build () Barber .render(data: DocumentData, locale: Locale) \u00b6 To render the final Document , a Barber requires a DocumentData , used to fill the DocumentTemplate , and an output Locale. First, the Barber uses a LocaleResolver to find the best Locale match from installed DocumentTemplate s. Then, using the Locale resolved DocumentTemplate , Barber renders the fields of DocumentTemplate using the passed in DocumentData . Returned is the requested Document rendered with the personalized values of DocumentData in the closest match to the requested Locale. // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument > () // Create the RecipientReceipt instance that holds the personalized data val sandy50Receipt = RecipientReceipt ( sender = \"Sandy Winchester\" , amount = \" $ 50 \" , cancelUrl = \"https://cash.app/cancel/123\" , deposit_expected_at = Instant . parse ( \"2019-05-21T16:02:00.00Z\" ) ) // Render the final document using the personalized DocumentData instance and the output Locale val renderedSms = recipientReceiptSms . render ( sandy50Receipt , EN_US ) @BarberField, BarberFieldEncoding, and HTML Character Escaping \u00b6 The @BarberField annotation can be used on Document class val fields to declare that the field should be rendered and treated according to a specific BarberFieldEncoding . BarberFieldEncoding can be for now STRING_HTML or STRING_PLAINTEXT . By default, all fields are treated as STRING_HTML and have common HTML escaping of characters for safety. When a field is annotated as STRING_PLAINTEXT , characters will not be escaped. data class EncodingTestDocument ( val no_annotation_field : String , @BarberField () val default_field : String , @BarberField ( encoding = BarberFieldEncoding . STRING_HTML ) val html_field : String , @BarberField ( encoding = BarberFieldEncoding . STRING_PLAINTEXT ) val plaintext_field : String ) : Document // Rendered with all fields set to `You purchased 100 shares of McDonald's.` EncodingTestDocument ( no_annotation_field = \"You purchased 100 shares of McDonald&#39;s.\" , default_field = \"You purchased 100 shares of McDonald&#39;s.\" , html_field = \"You purchased 100 shares of McDonald&#39;s.\" , // Note: no character escaping on the plaintext field plaintext_field = \"You purchased 100 shares of McDonald's.\" ) Locale \u00b6 Barber supports installation and resolution of multiple Locales for each DocumentTemplate . All Locale versions of a DocumentTemplate will be installed with the BarbershopBuilder. The desired output Locale is then provided at render time and the best available option is resolved. // Define DocumentTemplate in English val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US ) // Define DocumentTemplate in Canadian English val recipientReceiptSmsDocumentTemplateEN_CA = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}, eh!\" ), // ... same as EN_US locale = Locale . EN_CA ) // Define DocumentTemplate in Spanish val recipientReceiptSmsDocumentTemplateES_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} te envi\u00f3 {{amount}}\" ), // ... same as EN_US locale = Locale . ES_US ) // Use above elements to build a Barbershop val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateEN_US ) . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateEN_CA ) . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateES_US ) . installDocument < TransactionalSmsDocument > () . build () // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument > () // Render in each Locale val smsEN_US = recipientReceiptSms . render ( sandy50Receipt , EN_US ) // = Sandy Winchester sent you $50 val smsEN_CA = recipientReceiptSms . render ( sandy50Receipt , EN_CA ) // = Sandy Winchester sent you $50, eh? val smsES_US = recipientReceiptSms . render ( sandy50Receipt , ES_US ) // = Sandy Winchester te envio $50 LocaleResolver \u00b6 Determining based on a Locale passed in at render which installed Locale to render is done by a LocaleResolver. It is a simple interface that looks like this: interface LocaleResolver { /** * @return a [Locale] from the given [options] * @param [options] must be valid keys for a Locale keyed Map */ fun resolve ( locale : Locale , options : Set < Locale > ): Locale } Barber comes with a very simple MatchOrFirstLocaleResolver that attempts to resolve the requested Locale exactly, and otherwise fallsback to the first installed Locale. For more complex resolving algorithms, you can set your own custom LocaleResolver when building your Barbershop. val barbershop = BarbershopBuilder () // ... . setLocaleResolver ( MapleSyrupOrFirstLocaleResolver ()) // Always tries to resolve EN_CA . build () Integration with Guice \u00b6 If you use Guice, creating a module that automatically binds all possible typed Barber instances is simple. See the code example below. package com.your.service.package import com.google.inject.AbstractModule import com.google.inject.Key import com.google.inject.util.Types import app.cash.barber.Barber import app.cash.barber.Barbershop import app.cash.barber.models.BarberKey import app.cash.barber.models.Document import app.cash.barber.models.DocumentData /** * Binds all the barbers so they may be injected directly like so: * * ``` * @Inject var barber: Barber<RecipientReceipt, TransactionalSmsDocument> * ``` */ class BarberModule ( private val barbershop : Barbershop ) : AbstractModule () { override fun configure () { barbershop . getAllBarbers (). forEach { ( barberKey , barber ) -> bind ( barberKey . asGuiceKey ()). toInstance ( barber ) } } private fun BarberKey . asGuiceKey (): Key < Barber < DocumentData , Document >> { val barberType = Types . newParameterizedType ( Barber :: class . java , documentData . java , document . java ) @Suppress ( \"UNCHECKED_CAST\" ) // We know this cast is safe dynamically. return Key . get ( barberType ) as Key < Barber < DocumentData , Document >> } } Coming Soon \u00b6 FieldStemming \u00b6 Automatically replace Money, DateTime, and Instant types with BarberMoney, BarberDateTime, and BarberInstant that let templates call out localized formatted output of each type. Example BarberInstant(Instant(2019-05-15T15:23:11), EN_US) = mapOf( \"date\" to \"May 15, 2019\", \"time\" to \"3:23 pm\", \"casual\" to \"tomorrow at 3pm\" ) BarberMoney(Money(50_00), EN_US) = mapOf( \"full\" to \"$50.00\" \"casual\" to \"$50\" ) License \u00b6 Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#barber","text":"A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating.","title":"Barber\ud83d\udc88"},{"location":"#press","text":"Meet Barber\ud83d\udc88: the best way to manage your Mustache","title":"Press"},{"location":"#why","text":"An application will often have hundreds of user viewable strings to power UI, notifications, emails, and other text based user interactions. This leads to many questions about the how to achieve the desired functionality of these user viewable strings: These strings may want to be personalizable! Thus the string would now have to be a template that can render with a data blob unique to each user to produce a personalized string. How can we check that the fillable openings in templates have corresponding values in the data blob? How can templates and data blobs be validated at compile time to protect against runtime exceptions or user visible bugs? What if we want to pass around not just a single template string, but a collection of template strings for more complex documents? How could we support emails that have a subject, body, recipient, primary button\u2026? What about different languages? Could the same unique data blob could be used to support templates in different languages? What about time or money that differ between countries that even share the same language (ie. 12 vs 24 hour time)? How could that formatting localization be provided? To answer the above questions, we built Barber\ud83d\udc88. A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating.","title":"Why?"},{"location":"#getting-started","text":"To get started using Barber, skim below to understand the different elements used to safely render your localized, fillable, themed documents using Mustache templating.","title":"Getting Started"},{"location":"#releases","text":"Our change log has release history. API is subject to change. implementation ( \"app.cash.barber:barber:0.3.3\" ) Snapshot builds are available .","title":"Releases"},{"location":"#documentdata","text":"DocumentData is the data that is used to render a template. In Barber, this is defined as a data class making it easy to use in Kotlin. // Define DocumentData data class RecipientReceipt ( val sender : String , val amount : String , val cancelUrl : String , val deposit_expected_at : Instant ) : DocumentData To render a template, for example \"{{sender}} sent you {{amount}}\" , an instance of the above DocumentData could be passed in to fill the fillable openings in the template.","title":"DocumentData"},{"location":"#document","text":"The final fields of the output, rendered document. For simple documents, this may be a single field. // Define Document data class TransactionalSmsDocument ( val sms_body : String ) : Document For more complex documents that may be used in further processing, there may be multiple fields, which can be nullable. data class TransactionalEmailDocument ( val subject : String , val headline : String , val short_description : String , val primary_button : String? , val primary_button_url : String? , val secondary_button : String? , val secondary_button_url : String? ) : Document","title":"Document"},{"location":"#documenttemplate","text":"A DocumentTemplate is the glue that connects the DocumentData to the Document. It contains: - fields: - keys fulfill all the non-nullable keys of the Document targets - values are Mustache templates that are rendered with the passed in source DocumentData - source: DocumentData that can support all fillable templates in fields - targets: Document s that the DocumentTemplate can render to - locale: Locale for the language of the fields templates val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US )","title":"DocumentTemplate"},{"location":"#barber_1","text":"A Barber is typed to the DocumentData -> Document relationship that it knows how to render. Amy knows how to cut blonde hair into a Fu Manchu mustache. Joe knows how to trim brown hair into a soul patch mustache. // A Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms : Barber < RecipientReceipt , TransactionalSmsDocument >","title":"Barber"},{"location":"#barbershop","text":"A Barbershop contains all possible Barbers based on the installed DocumentData , DocumentTemplate , and Document s. Each Barber knows how to handle a different combination of DocumentData -> Document . You can call barbershop.getBarber<RecipientReceipt, TransactionalSmsDocument>() to get the Barber that can handle rendering a RecipientReceipt into a TransactionalSmsDocument . // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument > () You want a soul patch and have brown hair, get Joe! You want a Fu Manchu and have blonde hair, get Amy! You can also get a Map of all Barbers using barbershop.getAllBarbers() . // Get all Barbers val allBarbers : Map < BarberKey , Barber < DocumentData , Document >> = barbershop . getAllBarbers () Note: BarberKey is a data class that let\u2019s us lookup by both DocumentData and Document .","title":"Barbershop"},{"location":"#barbershopbuilder","text":"A Java style Builder that installs all of the above Barber elements and returns a pre-compiled and validated Barbershop. Install DocumentData and DocumentTemplate pairs with .installDocumentTemplate<RecipientReceipt>(recipientReceiptSmsDocumentTemplateEN_US) . Install Document with .installDocument<TransactionalSmsDocument>() Optionally set a custom LocaleResolver with .setLocaleResolver(MapleSyrupOrFirstLocaleResolver()) Optionally set a default BarberFieldEncoding for non-annotated Document fields with .setDefaultBarberFieldEncoding(STRING_PLAINTEXT) Optionally configure warning validation strictness with .setWarningsAsErrors() Return the finished Barbershop with .build() as the final method call on BarbershopBuilder. val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateEN_US ) . installDocument < TransactionalSmsDocument > () . build ()","title":"BarbershopBuilder"},{"location":"#barberrenderdata-documentdata-locale-locale","text":"To render the final Document , a Barber requires a DocumentData , used to fill the DocumentTemplate , and an output Locale. First, the Barber uses a LocaleResolver to find the best Locale match from installed DocumentTemplate s. Then, using the Locale resolved DocumentTemplate , Barber renders the fields of DocumentTemplate using the passed in DocumentData . Returned is the requested Document rendered with the personalized values of DocumentData in the closest match to the requested Locale. // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument > () // Create the RecipientReceipt instance that holds the personalized data val sandy50Receipt = RecipientReceipt ( sender = \"Sandy Winchester\" , amount = \" $ 50 \" , cancelUrl = \"https://cash.app/cancel/123\" , deposit_expected_at = Instant . parse ( \"2019-05-21T16:02:00.00Z\" ) ) // Render the final document using the personalized DocumentData instance and the output Locale val renderedSms = recipientReceiptSms . render ( sandy50Receipt , EN_US )","title":"Barber.render(data: DocumentData, locale: Locale)"},{"location":"#barberfield-barberfieldencoding-and-html-character-escaping","text":"The @BarberField annotation can be used on Document class val fields to declare that the field should be rendered and treated according to a specific BarberFieldEncoding . BarberFieldEncoding can be for now STRING_HTML or STRING_PLAINTEXT . By default, all fields are treated as STRING_HTML and have common HTML escaping of characters for safety. When a field is annotated as STRING_PLAINTEXT , characters will not be escaped. data class EncodingTestDocument ( val no_annotation_field : String , @BarberField () val default_field : String , @BarberField ( encoding = BarberFieldEncoding . STRING_HTML ) val html_field : String , @BarberField ( encoding = BarberFieldEncoding . STRING_PLAINTEXT ) val plaintext_field : String ) : Document // Rendered with all fields set to `You purchased 100 shares of McDonald's.` EncodingTestDocument ( no_annotation_field = \"You purchased 100 shares of McDonald&#39;s.\" , default_field = \"You purchased 100 shares of McDonald&#39;s.\" , html_field = \"You purchased 100 shares of McDonald&#39;s.\" , // Note: no character escaping on the plaintext field plaintext_field = \"You purchased 100 shares of McDonald's.\" )","title":"@BarberField, BarberFieldEncoding, and HTML Character Escaping"},{"location":"#locale","text":"Barber supports installation and resolution of multiple Locales for each DocumentTemplate . All Locale versions of a DocumentTemplate will be installed with the BarbershopBuilder. The desired output Locale is then provided at render time and the best available option is resolved. // Define DocumentTemplate in English val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US ) // Define DocumentTemplate in Canadian English val recipientReceiptSmsDocumentTemplateEN_CA = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}, eh!\" ), // ... same as EN_US locale = Locale . EN_CA ) // Define DocumentTemplate in Spanish val recipientReceiptSmsDocumentTemplateES_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} te envi\u00f3 {{amount}}\" ), // ... same as EN_US locale = Locale . ES_US ) // Use above elements to build a Barbershop val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateEN_US ) . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateEN_CA ) . installDocumentTemplate < RecipientReceipt > ( recipientReceiptSmsDocumentTemplateES_US ) . installDocument < TransactionalSmsDocument > () . build () // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument > () // Render in each Locale val smsEN_US = recipientReceiptSms . render ( sandy50Receipt , EN_US ) // = Sandy Winchester sent you $50 val smsEN_CA = recipientReceiptSms . render ( sandy50Receipt , EN_CA ) // = Sandy Winchester sent you $50, eh? val smsES_US = recipientReceiptSms . render ( sandy50Receipt , ES_US ) // = Sandy Winchester te envio $50","title":"Locale"},{"location":"#localeresolver","text":"Determining based on a Locale passed in at render which installed Locale to render is done by a LocaleResolver. It is a simple interface that looks like this: interface LocaleResolver { /** * @return a [Locale] from the given [options] * @param [options] must be valid keys for a Locale keyed Map */ fun resolve ( locale : Locale , options : Set < Locale > ): Locale } Barber comes with a very simple MatchOrFirstLocaleResolver that attempts to resolve the requested Locale exactly, and otherwise fallsback to the first installed Locale. For more complex resolving algorithms, you can set your own custom LocaleResolver when building your Barbershop. val barbershop = BarbershopBuilder () // ... . setLocaleResolver ( MapleSyrupOrFirstLocaleResolver ()) // Always tries to resolve EN_CA . build ()","title":"LocaleResolver"},{"location":"#integration-with-guice","text":"If you use Guice, creating a module that automatically binds all possible typed Barber instances is simple. See the code example below. package com.your.service.package import com.google.inject.AbstractModule import com.google.inject.Key import com.google.inject.util.Types import app.cash.barber.Barber import app.cash.barber.Barbershop import app.cash.barber.models.BarberKey import app.cash.barber.models.Document import app.cash.barber.models.DocumentData /** * Binds all the barbers so they may be injected directly like so: * * ``` * @Inject var barber: Barber<RecipientReceipt, TransactionalSmsDocument> * ``` */ class BarberModule ( private val barbershop : Barbershop ) : AbstractModule () { override fun configure () { barbershop . getAllBarbers (). forEach { ( barberKey , barber ) -> bind ( barberKey . asGuiceKey ()). toInstance ( barber ) } } private fun BarberKey . asGuiceKey (): Key < Barber < DocumentData , Document >> { val barberType = Types . newParameterizedType ( Barber :: class . java , documentData . java , document . java ) @Suppress ( \"UNCHECKED_CAST\" ) // We know this cast is safe dynamically. return Key . get ( barberType ) as Key < Barber < DocumentData , Document >> } }","title":"Integration with Guice"},{"location":"#coming-soon","text":"","title":"Coming Soon"},{"location":"#fieldstemming","text":"Automatically replace Money, DateTime, and Instant types with BarberMoney, BarberDateTime, and BarberInstant that let templates call out localized formatted output of each type. Example BarberInstant(Instant(2019-05-15T15:23:11), EN_US) = mapOf( \"date\" to \"May 15, 2019\", \"time\" to \"3:23 pm\", \"casual\" to \"tomorrow at 3pm\" ) BarberMoney(Money(50_00), EN_US) = mapOf( \"full\" to \"$50.00\" \"casual\" to \"$50\" )","title":"FieldStemming"},{"location":"#license","text":"Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 0.3.2 \u00b6 2020-10-21 Include Protos in Jar Version 0.3.1 \u00b6 2020-10-21 Render null DocumentData field as empty string, not as \u201cnull\u201d Version 0.3.0 \u00b6 2020-10-21 Default to String when Proto DocumentData has a null field with ambiguous type Version 0.2.0 \u00b6 2020-10-21 New support for dynamic document data and templates using Protos Version 0.1.0 \u00b6 2019-07-16 Initial release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-032","text":"2020-10-21 Include Protos in Jar","title":"Version 0.3.2"},{"location":"changelog/#version-031","text":"2020-10-21 Render null DocumentData field as empty string, not as \u201cnull\u201d","title":"Version 0.3.1"},{"location":"changelog/#version-030","text":"2020-10-21 Default to String when Proto DocumentData has a null field with ambiguous type","title":"Version 0.3.0"},{"location":"changelog/#version-020","text":"2020-10-21 New support for dynamic document data and templates using Protos","title":"Version 0.2.0"},{"location":"changelog/#version-010","text":"2019-07-16 Initial release.","title":"Version 0.1.0"},{"location":"contributing/","text":"Contributing \u00b6 If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"releasing-manual/","text":"Manual Releasing Steps \u00b6 These should generally not be needed but are kept here for posterity. The CI auto-releasing in Github Actions should be sufficient, and is documented in the Releasing doc. Prerequisite: Sonatype (Maven Central) Account \u00b6 Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for app.cash projects. Prerequisite: GPG Keys \u00b6 Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX Prerequisite: Gradle Properties \u00b6 Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg Cutting a Release \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.barber:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.barber:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a barber-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Manual Releasing"},{"location":"releasing-manual/#manual-releasing-steps","text":"These should generally not be needed but are kept here for posterity. The CI auto-releasing in Github Actions should be sufficient, and is documented in the Releasing doc.","title":"Manual Releasing Steps"},{"location":"releasing-manual/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for app.cash projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing-manual/#prerequisite-gpg-keys","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX","title":"Prerequisite: GPG Keys"},{"location":"releasing-manual/#prerequisite-gradle-properties","text":"Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Prerequisite: Gradle Properties"},{"location":"releasing-manual/#cutting-a-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.barber:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.barber:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a barber-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Cutting a Release"},{"location":"releasing/","text":"Releasing \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=A.B.C export NEXT_VERSION=A.B.D-SNAPSHOT Update documentation and Gradle properties with RELEASE_VERSION sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.barber:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.barber:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` Tag the release and push to GitHub. Merge PR. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a barber-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" git push && git push --tags Wait until the \u201cPublish a release\u201d action completes, then visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Prepare for the next release and push to GitHub. Merge PR. sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push Draft a new release of A.B.C to trigger the \u201cPublish the mkdocs to gh-pages\u201d action. Troubleshooting \u00b6 If the github action fails, drop the artifacts from Sonatype and re run the job. You might need to delete the plugin off the JetBrains plugin portal first if the ubuntu job which publishes it already succeeded.","title":"Releasing"},{"location":"releasing/#releasing","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=A.B.C export NEXT_VERSION=A.B.D-SNAPSHOT Update documentation and Gradle properties with RELEASE_VERSION sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.barber:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.barber:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` Tag the release and push to GitHub. Merge PR. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a barber-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" git push && git push --tags Wait until the \u201cPublish a release\u201d action completes, then visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Prepare for the next release and push to GitHub. Merge PR. sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push Draft a new release of A.B.C to trigger the \u201cPublish the mkdocs to gh-pages\u201d action.","title":"Releasing"},{"location":"releasing/#troubleshooting","text":"If the github action fails, drop the artifacts from Sonatype and re run the job. You might need to delete the plugin off the JetBrains plugin portal first if the ubuntu job which publishes it already succeeded.","title":"Troubleshooting"},{"location":"0.x/barber/","text":"barber Packages \u00b6 Name Summary app.cash.barber app.cash.barber.locale app.cash.barber.models Index \u00b6 All Types","title":"Index"},{"location":"0.x/barber/#packages","text":"Name Summary app.cash.barber app.cash.barber.locale app.cash.barber.models","title":"Packages"},{"location":"0.x/barber/#index","text":"All Types","title":"Index"},{"location":"0.x/barber/alltypes/","text":"All Types \u00b6 Name Summary app.cash.barber.Barber Knows how to render a Document from a DocumentTemplate and context variables in DocumentData app.cash.barber.BarberException An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. app.cash.barber.models.BarberField Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding . app.cash.barber.models.BarberFieldEncoding Used in BarberField annotation on Document fields to specify the encoding to render using. app.cash.barber.models.BarberKey app.cash.barber.BarberMustacheFactoryProvider Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field app.cash.barber.BarberPlaintextMustacheFactory Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory app.cash.barber.Barbershop A registry of templates with their input document data types and their output document types. app.cash.barber.BarbershopBuilder app.cash.barber.models.BarberSignature Deterministic signature of the required fields and respective types app.cash.barber.models.CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. app.cash.barber.models.Document This is a UI object that has the user-presented strings of a document. app.cash.barber.models.DocumentData This is a schema that specifies the input values for a DocumentTemplate template. app.cash.barber.models.DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. app.cash.barber.models.HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. kotlin.collections.Iterable (extensions in package app.cash.barber.models) app.cash.barber.locale.Locale Container for locale string Also has aliases for easier locale use in code app.cash.barber.locale.LocaleResolver Chooses which locale to use given an inventory of available templates. This class is responsible for making difficult policy decisions around which text to show which customers. app.cash.barber.models.TemplateToken Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate app.cash.barber.models.VersionRange","title":"Index"},{"location":"0.x/barber/alltypes/#all-types","text":"Name Summary app.cash.barber.Barber Knows how to render a Document from a DocumentTemplate and context variables in DocumentData app.cash.barber.BarberException An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. app.cash.barber.models.BarberField Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding . app.cash.barber.models.BarberFieldEncoding Used in BarberField annotation on Document fields to specify the encoding to render using. app.cash.barber.models.BarberKey app.cash.barber.BarberMustacheFactoryProvider Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field app.cash.barber.BarberPlaintextMustacheFactory Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory app.cash.barber.Barbershop A registry of templates with their input document data types and their output document types. app.cash.barber.BarbershopBuilder app.cash.barber.models.BarberSignature Deterministic signature of the required fields and respective types app.cash.barber.models.CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. app.cash.barber.models.Document This is a UI object that has the user-presented strings of a document. app.cash.barber.models.DocumentData This is a schema that specifies the input values for a DocumentTemplate template. app.cash.barber.models.DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. app.cash.barber.models.HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. kotlin.collections.Iterable (extensions in package app.cash.barber.models) app.cash.barber.locale.Locale Container for locale string Also has aliases for easier locale use in code app.cash.barber.locale.LocaleResolver Chooses which locale to use given an inventory of available templates. This class is responsible for making difficult policy decisions around which text to show which customers. app.cash.barber.models.TemplateToken Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate app.cash.barber.models.VersionRange","title":"All Types"},{"location":"0.x/barber/app.cash.barber/","text":"barber / app.cash.barber Package app.cash.barber \u00b6 Types \u00b6 Name Summary Barber interface Barber<D : Document > Knows how to render a Document from a DocumentTemplate and context variables in DocumentData BarberMustacheFactoryProvider class BarberMustacheFactoryProvider Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field BarberPlaintextMustacheFactory class BarberPlaintextMustacheFactory : DefaultMustacheFactory Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory Barbershop interface Barbershop A registry of templates with their input document data types and their output document types. BarbershopBuilder class BarbershopBuilder : Barbershop.Builder Exceptions \u00b6 Name Summary BarberException class BarberException : IllegalStateException An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. Functions \u00b6 Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < D > fun <D : Document > Barbershop .getBarber(templateToken: TemplateToken ): Barber < D > getTargetDocuments fun <DD : DocumentData > Barbershop .getTargetDocuments(version: Long ? = null): Set < KClass <out Document >>","title":"barber"},{"location":"0.x/barber/app.cash.barber/#package-appcashbarber","text":"","title":"Package app.cash.barber"},{"location":"0.x/barber/app.cash.barber/#types","text":"Name Summary Barber interface Barber<D : Document > Knows how to render a Document from a DocumentTemplate and context variables in DocumentData BarberMustacheFactoryProvider class BarberMustacheFactoryProvider Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field BarberPlaintextMustacheFactory class BarberPlaintextMustacheFactory : DefaultMustacheFactory Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory Barbershop interface Barbershop A registry of templates with their input document data types and their output document types. BarbershopBuilder class BarbershopBuilder : Barbershop.Builder","title":"Types"},{"location":"0.x/barber/app.cash.barber/#exceptions","text":"Name Summary BarberException class BarberException : IllegalStateException An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types.","title":"Exceptions"},{"location":"0.x/barber/app.cash.barber/#functions","text":"Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < D > fun <D : Document > Barbershop .getBarber(templateToken: TemplateToken ): Barber < D > getTargetDocuments fun <DD : DocumentData > Barbershop .getTargetDocuments(version: Long ? = null): Set < KClass <out Document >>","title":"Functions"},{"location":"0.x/barber/app.cash.barber/get-barber/","text":"barber / app.cash.barber / getBarber getBarber \u00b6 inline fun <reified DD : DocumentData , reified D : Document > Barbershop .getBarber(): Barber < D > inline fun <reified D : Document > Barbershop .getBarber(templateToken: TemplateToken ): Barber < D >","title":"Get barber"},{"location":"0.x/barber/app.cash.barber/get-barber/#getbarber","text":"inline fun <reified DD : DocumentData , reified D : Document > Barbershop .getBarber(): Barber < D > inline fun <reified D : Document > Barbershop .getBarber(templateToken: TemplateToken ): Barber < D >","title":"getBarber"},{"location":"0.x/barber/app.cash.barber/get-target-documents/","text":"barber / app.cash.barber / getTargetDocuments getTargetDocuments \u00b6 inline fun <reified DD : DocumentData > Barbershop .getTargetDocuments(version: Long ? = null): Set < KClass <out Document >>","title":"Get target documents"},{"location":"0.x/barber/app.cash.barber/get-target-documents/#gettargetdocuments","text":"inline fun <reified DD : DocumentData > Barbershop .getTargetDocuments(version: Long ? = null): Set < KClass <out Document >>","title":"getTargetDocuments"},{"location":"0.x/barber/app.cash.barber/-barber/","text":"barber / app.cash.barber / Barber Barber \u00b6 interface Barber<D : Document > Knows how to render a Document from a DocumentTemplate and context variables in DocumentData Properties \u00b6 Name Summary supportedVersionRanges abstract val supportedVersionRanges: Set < VersionRange > Set of the DocumentTemplate version ranges that are supported by this Barber This prevents the case of a DocumentTemplate changing which documents are targetted and a Barber not being able to support the change and blowing up at runtime Functions \u00b6 Name Summary render abstract fun <DD : DocumentData > render(documentData: DD , locale: Locale , version: Long ? = null): D Render using a DocumentData Kotlin data class abstract fun render(documentData: <ERROR CLASS>, locale: Locale , version: Long ? = null): D Render using a DocumentData proto","title":"Index"},{"location":"0.x/barber/app.cash.barber/-barber/#barber","text":"interface Barber<D : Document > Knows how to render a Document from a DocumentTemplate and context variables in DocumentData","title":"Barber"},{"location":"0.x/barber/app.cash.barber/-barber/#properties","text":"Name Summary supportedVersionRanges abstract val supportedVersionRanges: Set < VersionRange > Set of the DocumentTemplate version ranges that are supported by this Barber This prevents the case of a DocumentTemplate changing which documents are targetted and a Barber not being able to support the change and blowing up at runtime","title":"Properties"},{"location":"0.x/barber/app.cash.barber/-barber/#functions","text":"Name Summary render abstract fun <DD : DocumentData > render(documentData: DD , locale: Locale , version: Long ? = null): D Render using a DocumentData Kotlin data class abstract fun render(documentData: <ERROR CLASS>, locale: Locale , version: Long ? = null): D Render using a DocumentData proto","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barber/render/","text":"barber / app.cash.barber / Barber / render render \u00b6 abstract fun <DD : DocumentData > render(documentData: DD , locale: Locale , version: Long ? = null): D Render using a DocumentData Kotlin data class Parameters \u00b6 version - is optional additional parameter; latest compatible will be used if not provided abstract fun render(documentData: <ERROR CLASS>, locale: Locale , version: Long ? = null): D Render using a DocumentData proto Parameters \u00b6 version - is optional additional parameter; latest compatible will be used if not provided","title":"Render"},{"location":"0.x/barber/app.cash.barber/-barber/render/#render","text":"abstract fun <DD : DocumentData > render(documentData: DD , locale: Locale , version: Long ? = null): D Render using a DocumentData Kotlin data class","title":"render"},{"location":"0.x/barber/app.cash.barber/-barber/render/#parameters","text":"version - is optional additional parameter; latest compatible will be used if not provided abstract fun render(documentData: <ERROR CLASS>, locale: Locale , version: Long ? = null): D Render using a DocumentData proto","title":"Parameters"},{"location":"0.x/barber/app.cash.barber/-barber/render/#parameters_1","text":"version - is optional additional parameter; latest compatible will be used if not provided","title":"Parameters"},{"location":"0.x/barber/app.cash.barber/-barber/supported-version-ranges/","text":"barber / app.cash.barber / Barber / supportedVersionRanges supportedVersionRanges \u00b6 abstract val supportedVersionRanges: Set < VersionRange > Set of the DocumentTemplate version ranges that are supported by this Barber This prevents the case of a DocumentTemplate changing which documents are targetted and a Barber not being able to support the change and blowing up at runtime","title":"Supported version ranges"},{"location":"0.x/barber/app.cash.barber/-barber/supported-version-ranges/#supportedversionranges","text":"abstract val supportedVersionRanges: Set < VersionRange > Set of the DocumentTemplate version ranges that are supported by this Barber This prevents the case of a DocumentTemplate changing which documents are targetted and a Barber not being able to support the change and blowing up at runtime","title":"supportedVersionRanges"},{"location":"0.x/barber/app.cash.barber/-barber-exception/","text":"barber / app.cash.barber / BarberException BarberException \u00b6 class BarberException : IllegalStateException An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. For example this exception is raised if a document data lacks an input field that a template expects, or if a template lacks an output field that a document expects. Example: Problems 1) Attempted to install DocumentTemplate with a DocumentData not specified in the DocumentTemplate source. DocumentTemplate.source: class app.cash.barber.examples.RecipientReceipt DocumentData: class app.cash.barber.examples.SenderReceipt 2) Missing variable [sender] in DocumentData [class app.cash.barber.examples.SenderReceipt] for DocumentTemplate field [{{sender}} sent you {{amount}}. It will be available at {{ deposit_expected_at }}. Cancel here: {{ cancelUrl }}] 3) Unused DocumentData variable [recipient] in [class app.cash.barber.examples.SenderReceipt] with no usage in installed DocumentTemplate Locales: [Locale=en-US] Constructors \u00b6 Name Summary <init> BarberException(errors: List < String > = listOf(), warnings: List < String > = listOf()) An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. Properties \u00b6 Name Summary errors val errors: List < String > warnings val warnings: List < String > Functions \u00b6 Name Summary toString fun toString(): String Companion Object Functions \u00b6 Name Summary maybeThrowBarberException fun maybeThrowBarberException(errors: List < String >, warnings: List < String >, warningsAsErrors: Boolean ): Unit Throwing early makes debugging simpler for Barber developers as the above simple warnings can be raised before a flood of other errors below fail as a result of the above","title":"Index"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#barberexception","text":"class BarberException : IllegalStateException An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. For example this exception is raised if a document data lacks an input field that a template expects, or if a template lacks an output field that a document expects. Example: Problems 1) Attempted to install DocumentTemplate with a DocumentData not specified in the DocumentTemplate source. DocumentTemplate.source: class app.cash.barber.examples.RecipientReceipt DocumentData: class app.cash.barber.examples.SenderReceipt 2) Missing variable [sender] in DocumentData [class app.cash.barber.examples.SenderReceipt] for DocumentTemplate field [{{sender}} sent you {{amount}}. It will be available at {{ deposit_expected_at }}. Cancel here: {{ cancelUrl }}] 3) Unused DocumentData variable [recipient] in [class app.cash.barber.examples.SenderReceipt] with no usage in installed DocumentTemplate Locales: [Locale=en-US]","title":"BarberException"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#constructors","text":"Name Summary <init> BarberException(errors: List < String > = listOf(), warnings: List < String > = listOf()) An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types.","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#properties","text":"Name Summary errors val errors: List < String > warnings val warnings: List < String >","title":"Properties"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#companion-object-functions","text":"Name Summary maybeThrowBarberException fun maybeThrowBarberException(errors: List < String >, warnings: List < String >, warningsAsErrors: Boolean ): Unit Throwing early makes debugging simpler for Barber developers as the above simple warnings can be raised before a flood of other errors below fail as a result of the above","title":"Companion Object Functions"},{"location":"0.x/barber/app.cash.barber/-barber-exception/-init-/","text":"barber / app.cash.barber / BarberException / <init> <init> \u00b6 BarberException(errors: List < String > = listOf(), warnings: List < String > = listOf()) An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. For example this exception is raised if a document data lacks an input field that a template expects, or if a template lacks an output field that a document expects. Example: Problems 1) Attempted to install DocumentTemplate with a DocumentData not specified in the DocumentTemplate source. DocumentTemplate.source: class app.cash.barber.examples.RecipientReceipt DocumentData: class app.cash.barber.examples.SenderReceipt 2) Missing variable [sender] in DocumentData [class app.cash.barber.examples.SenderReceipt] for DocumentTemplate field [{{sender}} sent you {{amount}}. It will be available at {{ deposit_expected_at }}. Cancel here: {{ cancelUrl }}] 3) Unused DocumentData variable [recipient] in [class app.cash.barber.examples.SenderReceipt] with no usage in installed DocumentTemplate Locales: [Locale=en-US]","title":" init "},{"location":"0.x/barber/app.cash.barber/-barber-exception/-init-/#init","text":"BarberException(errors: List < String > = listOf(), warnings: List < String > = listOf()) An error, typically presented at application startup, that describes an inconsistency between the input document data types, the templates, and the target document types. For example this exception is raised if a document data lacks an input field that a template expects, or if a template lacks an output field that a document expects. Example: Problems 1) Attempted to install DocumentTemplate with a DocumentData not specified in the DocumentTemplate source. DocumentTemplate.source: class app.cash.barber.examples.RecipientReceipt DocumentData: class app.cash.barber.examples.SenderReceipt 2) Missing variable [sender] in DocumentData [class app.cash.barber.examples.SenderReceipt] for DocumentTemplate field [{{sender}} sent you {{amount}}. It will be available at {{ deposit_expected_at }}. Cancel here: {{ cancelUrl }}] 3) Unused DocumentData variable [recipient] in [class app.cash.barber.examples.SenderReceipt] with no usage in installed DocumentTemplate Locales: [Locale=en-US]","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-barber-exception/errors/","text":"barber / app.cash.barber / BarberException / errors errors \u00b6 val errors: List < String >","title":"Errors"},{"location":"0.x/barber/app.cash.barber/-barber-exception/errors/#errors","text":"val errors: List < String >","title":"errors"},{"location":"0.x/barber/app.cash.barber/-barber-exception/maybe-throw-barber-exception/","text":"barber / app.cash.barber / BarberException / maybeThrowBarberException maybeThrowBarberException \u00b6 fun maybeThrowBarberException(errors: List < String >, warnings: List < String >, warningsAsErrors: Boolean ): Unit Throwing early makes debugging simpler for Barber developers as the above simple warnings can be raised before a flood of other errors below fail as a result of the above","title":"Maybe throw barber exception"},{"location":"0.x/barber/app.cash.barber/-barber-exception/maybe-throw-barber-exception/#maybethrowbarberexception","text":"fun maybeThrowBarberException(errors: List < String >, warnings: List < String >, warningsAsErrors: Boolean ): Unit Throwing early makes debugging simpler for Barber developers as the above simple warnings can be raised before a flood of other errors below fail as a result of the above","title":"maybeThrowBarberException"},{"location":"0.x/barber/app.cash.barber/-barber-exception/to-string/","text":"barber / app.cash.barber / BarberException / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"0.x/barber/app.cash.barber/-barber-exception/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/barber/app.cash.barber/-barber-exception/warnings/","text":"barber / app.cash.barber / BarberException / warnings warnings \u00b6 val warnings: List < String >","title":"Warnings"},{"location":"0.x/barber/app.cash.barber/-barber-exception/warnings/#warnings","text":"val warnings: List < String >","title":"warnings"},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/","text":"barber / app.cash.barber / BarberMustacheFactoryProvider BarberMustacheFactoryProvider \u00b6 class BarberMustacheFactoryProvider Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field Constructors \u00b6 Name Summary <init> BarberMustacheFactoryProvider(defaultBarberFieldEncoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field Functions \u00b6 Name Summary get fun get(encoding: BarberFieldEncoding ? = null): DefaultMustacheFactory","title":"Index"},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/#barbermustachefactoryprovider","text":"class BarberMustacheFactoryProvider Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field","title":"BarberMustacheFactoryProvider"},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/#constructors","text":"Name Summary <init> BarberMustacheFactoryProvider(defaultBarberFieldEncoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/#functions","text":"Name Summary get fun get(encoding: BarberFieldEncoding ? = null): DefaultMustacheFactory","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/-init-/","text":"barber / app.cash.barber / BarberMustacheFactoryProvider / <init> <init> \u00b6 BarberMustacheFactoryProvider(defaultBarberFieldEncoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field","title":" init "},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/-init-/#init","text":"BarberMustacheFactoryProvider(defaultBarberFieldEncoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Provides a MustacheFactory depending on the BarberFieldEncoding of the Document field","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/get/","text":"barber / app.cash.barber / BarberMustacheFactoryProvider / get get \u00b6 fun get(encoding: BarberFieldEncoding ? = null): DefaultMustacheFactory","title":"Get"},{"location":"0.x/barber/app.cash.barber/-barber-mustache-factory-provider/get/#get","text":"fun get(encoding: BarberFieldEncoding ? = null): DefaultMustacheFactory","title":"get"},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/","text":"barber / app.cash.barber / BarberPlaintextMustacheFactory BarberPlaintextMustacheFactory \u00b6 class BarberPlaintextMustacheFactory : DefaultMustacheFactory Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory Constructors \u00b6 Name Summary <init> BarberPlaintextMustacheFactory() Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory Functions \u00b6 Name Summary encode fun encode(value: String ?, writer: Writer ?): Unit","title":"Index"},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/#barberplaintextmustachefactory","text":"class BarberPlaintextMustacheFactory : DefaultMustacheFactory Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory","title":"BarberPlaintextMustacheFactory"},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/#constructors","text":"Name Summary <init> BarberPlaintextMustacheFactory() Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/#functions","text":"Name Summary encode fun encode(value: String ?, writer: Writer ?): Unit","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/-init-/","text":"barber / app.cash.barber / BarberPlaintextMustacheFactory / <init> <init> \u00b6 BarberPlaintextMustacheFactory() Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory","title":" init "},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/-init-/#init","text":"BarberPlaintextMustacheFactory() Mustache Factory that handles STRING_PLAINTEXT fields and doesn\u2019t apply the HTML escaping present in DefaultMustacheFactory","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/encode/","text":"barber / app.cash.barber / BarberPlaintextMustacheFactory / encode encode \u00b6 fun encode(value: String ?, writer: Writer ?): Unit","title":"Encode"},{"location":"0.x/barber/app.cash.barber/-barber-plaintext-mustache-factory/encode/#encode","text":"fun encode(value: String ?, writer: Writer ?): Unit","title":"encode"},{"location":"0.x/barber/app.cash.barber/-barbershop/","text":"barber / app.cash.barber / Barbershop Barbershop \u00b6 interface Barbershop A registry of templates with their input document data types and their output document types. Types \u00b6 Name Summary Builder interface Builder Functions \u00b6 Name Summary getAllBarbers abstract fun getAllBarbers(): Map < BarberKey , Barber <*>> Get all Barbers installed and validated in the Barbershop getBarber abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < D > Get Barber that can handle static DocumentData Kotlin data class abstract fun <D : Document > getBarber(templateToken: TemplateToken , documentClass: KClass <out D >): Barber < D > Get barber that the latest (or optionally a specific version ) DocumentData proto targets getTargetDocuments abstract fun <DD : DocumentData > getTargetDocuments(documentDataClass: KClass <out DD >, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) DocumentData Kotlin data class targets abstract fun getTargetDocuments(templateToken: TemplateToken , version: Long ? = null): Set < KClass <out Document >> abstract fun getTargetDocuments(documentData: <ERROR CLASS>, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) TemplateToken targets getWarnings abstract fun getWarnings(): List < String > Get any Warnings raised from initial install and validation Extension Functions \u00b6 Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < D > fun <D : Document > Barbershop .getBarber(templateToken: TemplateToken ): Barber < D > getTargetDocuments fun <DD : DocumentData > Barbershop .getTargetDocuments(version: Long ? = null): Set < KClass <out Document >>","title":"Index"},{"location":"0.x/barber/app.cash.barber/-barbershop/#barbershop","text":"interface Barbershop A registry of templates with their input document data types and their output document types.","title":"Barbershop"},{"location":"0.x/barber/app.cash.barber/-barbershop/#types","text":"Name Summary Builder interface Builder","title":"Types"},{"location":"0.x/barber/app.cash.barber/-barbershop/#functions","text":"Name Summary getAllBarbers abstract fun getAllBarbers(): Map < BarberKey , Barber <*>> Get all Barbers installed and validated in the Barbershop getBarber abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < D > Get Barber that can handle static DocumentData Kotlin data class abstract fun <D : Document > getBarber(templateToken: TemplateToken , documentClass: KClass <out D >): Barber < D > Get barber that the latest (or optionally a specific version ) DocumentData proto targets getTargetDocuments abstract fun <DD : DocumentData > getTargetDocuments(documentDataClass: KClass <out DD >, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) DocumentData Kotlin data class targets abstract fun getTargetDocuments(templateToken: TemplateToken , version: Long ? = null): Set < KClass <out Document >> abstract fun getTargetDocuments(documentData: <ERROR CLASS>, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) TemplateToken targets getWarnings abstract fun getWarnings(): List < String > Get any Warnings raised from initial install and validation","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop/#extension-functions","text":"Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < D > fun <D : Document > Barbershop .getBarber(templateToken: TemplateToken ): Barber < D > getTargetDocuments fun <DD : DocumentData > Barbershop .getTargetDocuments(version: Long ? = null): Set < KClass <out Document >>","title":"Extension Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-all-barbers/","text":"barber / app.cash.barber / Barbershop / getAllBarbers getAllBarbers \u00b6 abstract fun getAllBarbers(): Map < BarberKey , Barber <*>> Get all Barbers installed and validated in the Barbershop","title":"Get all barbers"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-all-barbers/#getallbarbers","text":"abstract fun getAllBarbers(): Map < BarberKey , Barber <*>> Get all Barbers installed and validated in the Barbershop","title":"getAllBarbers"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-barber/","text":"barber / app.cash.barber / Barbershop / getBarber getBarber \u00b6 abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < D > Get Barber that can handle static DocumentData Kotlin data class abstract fun <D : Document > getBarber(templateToken: TemplateToken , documentClass: KClass <out D >): Barber < D > Get barber that the latest (or optionally a specific version ) DocumentData proto targets","title":"Get barber"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-barber/#getbarber","text":"abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < D > Get Barber that can handle static DocumentData Kotlin data class abstract fun <D : Document > getBarber(templateToken: TemplateToken , documentClass: KClass <out D >): Barber < D > Get barber that the latest (or optionally a specific version ) DocumentData proto targets","title":"getBarber"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-target-documents/","text":"barber / app.cash.barber / Barbershop / getTargetDocuments getTargetDocuments \u00b6 abstract fun <DD : DocumentData > getTargetDocuments(documentDataClass: KClass <out DD >, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) DocumentData Kotlin data class targets abstract fun getTargetDocuments(templateToken: TemplateToken , version: Long ? = null): Set < KClass <out Document >> abstract fun getTargetDocuments(documentData: <ERROR CLASS>, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) TemplateToken targets","title":"Get target documents"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-target-documents/#gettargetdocuments","text":"abstract fun <DD : DocumentData > getTargetDocuments(documentDataClass: KClass <out DD >, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) DocumentData Kotlin data class targets abstract fun getTargetDocuments(templateToken: TemplateToken , version: Long ? = null): Set < KClass <out Document >> abstract fun getTargetDocuments(documentData: <ERROR CLASS>, version: Long ? = null): Set < KClass <out Document >> Get Documents that the latest (or optionally a specific version ) TemplateToken targets","title":"getTargetDocuments"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-warnings/","text":"barber / app.cash.barber / Barbershop / getWarnings getWarnings \u00b6 abstract fun getWarnings(): List < String > Get any Warnings raised from initial install and validation","title":"Get warnings"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-warnings/#getwarnings","text":"abstract fun getWarnings(): List < String > Get any Warnings raised from initial install and validation","title":"getWarnings"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/","text":"barber / app.cash.barber / Barbershop / Builder Builder \u00b6 interface Builder Functions \u00b6 Name Summary build abstract fun build(): Barbershop Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop. installDocument abstract fun installDocument(document: KClass <out Document >): Barbershop.Builder Prepares this Barbershop to render instances of document . installDocumentTemplate abstract fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): Barbershop.Builder Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale. setDefaultBarberFieldEncoding abstract fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used. setLocaleResolver abstract fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template. setWarningsAsErrors abstract fun setWarningsAsErrors(): Barbershop.Builder Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation. Inheritors \u00b6 Name Summary BarbershopBuilder class BarbershopBuilder : Barbershop.Builder","title":"Index"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/#builder","text":"interface Builder","title":"Builder"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/#functions","text":"Name Summary build abstract fun build(): Barbershop Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop. installDocument abstract fun installDocument(document: KClass <out Document >): Barbershop.Builder Prepares this Barbershop to render instances of document . installDocumentTemplate abstract fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): Barbershop.Builder Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale. setDefaultBarberFieldEncoding abstract fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used. setLocaleResolver abstract fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template. setWarningsAsErrors abstract fun setWarningsAsErrors(): Barbershop.Builder Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation.","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/#inheritors","text":"Name Summary BarbershopBuilder class BarbershopBuilder : Barbershop.Builder","title":"Inheritors"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/build/","text":"barber / app.cash.barber / Barbershop / Builder / build build \u00b6 abstract fun build(): Barbershop Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop.","title":"Build"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/build/#build","text":"abstract fun build(): Barbershop Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop.","title":"build"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document-template/","text":"barber / app.cash.barber / Barbershop / Builder / installDocumentTemplate installDocumentTemplate \u00b6 abstract fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): Barbershop.Builder Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale.","title":"Install document template"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document-template/#installdocumenttemplate","text":"abstract fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): Barbershop.Builder Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale.","title":"installDocumentTemplate"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document/","text":"barber / app.cash.barber / Barbershop / Builder / installDocument installDocument \u00b6 abstract fun installDocument(document: KClass <out Document >): Barbershop.Builder Prepares this Barbershop to render instances of document .","title":"Install document"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document/#installdocument","text":"abstract fun installDocument(document: KClass <out Document >): Barbershop.Builder Prepares this Barbershop to render instances of document .","title":"installDocument"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-default-barber-field-encoding/","text":"barber / app.cash.barber / Barbershop / Builder / setDefaultBarberFieldEncoding setDefaultBarberFieldEncoding \u00b6 abstract fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used.","title":"Set default barber field encoding"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-default-barber-field-encoding/#setdefaultbarberfieldencoding","text":"abstract fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used.","title":"setDefaultBarberFieldEncoding"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-locale-resolver/","text":"barber / app.cash.barber / Barbershop / Builder / setLocaleResolver setLocaleResolver \u00b6 abstract fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template.","title":"Set locale resolver"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-locale-resolver/#setlocaleresolver","text":"abstract fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template.","title":"setLocaleResolver"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-warnings-as-errors/","text":"barber / app.cash.barber / Barbershop / Builder / setWarningsAsErrors setWarningsAsErrors \u00b6 abstract fun setWarningsAsErrors(): Barbershop.Builder Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation.","title":"Set warnings as errors"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-warnings-as-errors/#setwarningsaserrors","text":"abstract fun setWarningsAsErrors(): Barbershop.Builder Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation.","title":"setWarningsAsErrors"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/","text":"barber / app.cash.barber / BarbershopBuilder BarbershopBuilder \u00b6 class BarbershopBuilder : Barbershop.Builder Constructors \u00b6 Name Summary <init> BarbershopBuilder() Functions \u00b6 Name Summary build fun build(): Barbershop Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop. installDocument fun installDocument(document: KClass <out Document >): BarbershopBuilder Prepares this Barbershop to render instances of document . fun <D : Document > installDocument(): BarbershopBuilder installDocumentTemplate fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): BarbershopBuilder Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale. fun <DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder setDefaultBarberFieldEncoding fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used. setLocaleResolver fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template. setWarningsAsErrors fun setWarningsAsErrors(): Barbershop.Builder Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation.","title":"Index"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/#barbershopbuilder","text":"class BarbershopBuilder : Barbershop.Builder","title":"BarbershopBuilder"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/#constructors","text":"Name Summary <init> BarbershopBuilder()","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/#functions","text":"Name Summary build fun build(): Barbershop Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop. installDocument fun installDocument(document: KClass <out Document >): BarbershopBuilder Prepares this Barbershop to render instances of document . fun <D : Document > installDocument(): BarbershopBuilder installDocumentTemplate fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): BarbershopBuilder Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale. fun <DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder setDefaultBarberFieldEncoding fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used. setLocaleResolver fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template. setWarningsAsErrors fun setWarningsAsErrors(): Barbershop.Builder Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation.","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/-init-/","text":"barber / app.cash.barber / BarbershopBuilder / <init> <init> \u00b6 BarbershopBuilder()","title":" init "},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/-init-/#init","text":"BarbershopBuilder()","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/build/","text":"barber / app.cash.barber / BarbershopBuilder / build build \u00b6 fun build(): Barbershop Overrides Builder.build Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop.","title":"Build"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/build/#build","text":"fun build(): Barbershop Overrides Builder.build Validates that all templates, document datas, and documents are mutually consistent and returns a new Barbershop.","title":"build"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document-template/","text":"barber / app.cash.barber / BarbershopBuilder / installDocumentTemplate installDocumentTemplate \u00b6 fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): BarbershopBuilder Overrides Builder.installDocumentTemplate Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale. inline fun <reified DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder","title":"Install document template"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document-template/#installdocumenttemplate","text":"fun installDocumentTemplate(documentTemplate: <ERROR CLASS>): BarbershopBuilder Overrides Builder.installDocumentTemplate Configures this Barbershop so that instances of documentTemplate.templateToken will rendered by documentTemplate for its target locale. inline fun <reified DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder","title":"installDocumentTemplate"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document/","text":"barber / app.cash.barber / BarbershopBuilder / installDocument installDocument \u00b6 fun installDocument(document: KClass <out Document >): BarbershopBuilder Overrides Builder.installDocument Prepares this Barbershop to render instances of document . inline fun <reified D : Document > installDocument(): BarbershopBuilder","title":"Install document"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document/#installdocument","text":"fun installDocument(document: KClass <out Document >): BarbershopBuilder Overrides Builder.installDocument Prepares this Barbershop to render instances of document . inline fun <reified D : Document > installDocument(): BarbershopBuilder","title":"installDocument"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-default-barber-field-encoding/","text":"barber / app.cash.barber / BarbershopBuilder / setDefaultBarberFieldEncoding setDefaultBarberFieldEncoding \u00b6 fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Overrides Builder.setDefaultBarberFieldEncoding Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used.","title":"Set default barber field encoding"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-default-barber-field-encoding/#setdefaultbarberfieldencoding","text":"fun setDefaultBarberFieldEncoding(encoding: BarberFieldEncoding ): Barbershop.Builder Overrides Builder.setDefaultBarberFieldEncoding Configures this Barbershop to use a given BarberFieldEncoding when no annotation to override is present. By default, BarberFieldEncoding.STRING_HTML is used.","title":"setDefaultBarberFieldEncoding"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-locale-resolver/","text":"barber / app.cash.barber / BarbershopBuilder / setLocaleResolver setLocaleResolver \u00b6 fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Overrides Builder.setLocaleResolver Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template.","title":"Set locale resolver"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-locale-resolver/#setlocaleresolver","text":"fun setLocaleResolver(resolver: LocaleResolver ): Barbershop.Builder Overrides Builder.setLocaleResolver Configures this Barbershop to use LocaleResolver to map requested locales to available templates. By default Barber does an exact match, and if nothing matches it uses the first installed template.","title":"setLocaleResolver"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-warnings-as-errors/","text":"barber / app.cash.barber / BarbershopBuilder / setWarningsAsErrors setWarningsAsErrors \u00b6 fun setWarningsAsErrors(): Barbershop.Builder Overrides Builder.setWarningsAsErrors Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation.","title":"Set warnings as errors"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-warnings-as-errors/#setwarningsaserrors","text":"fun setWarningsAsErrors(): Barbershop.Builder Overrides Builder.setWarningsAsErrors Configures this Barbershop to treat warnings as errors during validataion. By default, only errors, not warnings, lead to fatal BarberException during validation.","title":"setWarningsAsErrors"},{"location":"0.x/barber/app.cash.barber.locale/","text":"barber / app.cash.barber.locale Package app.cash.barber.locale \u00b6 Types \u00b6 Name Summary Locale data class Locale Container for locale string Also has aliases for easier locale use in code LocaleResolver interface LocaleResolver Chooses which locale to use given an inventory of available templates. This class is responsible for making difficult policy decisions around which text to show which customers.","title":"Index"},{"location":"0.x/barber/app.cash.barber.locale/#package-appcashbarberlocale","text":"","title":"Package app.cash.barber.locale"},{"location":"0.x/barber/app.cash.barber.locale/#types","text":"Name Summary Locale data class Locale Container for locale string Also has aliases for easier locale use in code LocaleResolver interface LocaleResolver Chooses which locale to use given an inventory of available templates. This class is responsible for making difficult policy decisions around which text to show which customers.","title":"Types"},{"location":"0.x/barber/app.cash.barber.locale/-locale/","text":"barber / app.cash.barber.locale / Locale Locale \u00b6 data class Locale Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada Constructors \u00b6 Name Summary <init> Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code Properties \u00b6 Name Summary locale val locale: String Functions \u00b6 Name Summary toString fun toString(): String Companion Object Properties \u00b6 Name Summary EN_CA val EN_CA: Locale EN_GB val EN_GB: Locale EN_US val EN_US: Locale ES_SP val ES_SP: Locale ES_US val ES_US: Locale FR_CA val FR_CA: Locale FR_FR val FR_FR: Locale","title":"Index"},{"location":"0.x/barber/app.cash.barber.locale/-locale/#locale","text":"data class Locale Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada","title":"Locale"},{"location":"0.x/barber/app.cash.barber.locale/-locale/#constructors","text":"Name Summary <init> Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.locale/-locale/#properties","text":"Name Summary locale val locale: String","title":"Properties"},{"location":"0.x/barber/app.cash.barber.locale/-locale/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"0.x/barber/app.cash.barber.locale/-locale/#companion-object-properties","text":"Name Summary EN_CA val EN_CA: Locale EN_GB val EN_GB: Locale EN_US val EN_US: Locale ES_SP val ES_SP: Locale ES_US val ES_US: Locale FR_CA val FR_CA: Locale FR_FR val FR_FR: Locale","title":"Companion Object Properties"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-n_-c-a/","text":"barber / app.cash.barber.locale / Locale / EN_CA EN_CA \u00b6 val EN_CA: Locale","title":" e n  c a"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-n_-c-a/#en_ca","text":"val EN_CA: Locale","title":"EN_CA"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-n_-g-b/","text":"barber / app.cash.barber.locale / Locale / EN_GB EN_GB \u00b6 val EN_GB: Locale","title":" e n  g b"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-n_-g-b/#en_gb","text":"val EN_GB: Locale","title":"EN_GB"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-n_-u-s/","text":"barber / app.cash.barber.locale / Locale / EN_US EN_US \u00b6 val EN_US: Locale","title":" e n  u s"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-n_-u-s/#en_us","text":"val EN_US: Locale","title":"EN_US"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-s_-s-p/","text":"barber / app.cash.barber.locale / Locale / ES_SP ES_SP \u00b6 val ES_SP: Locale","title":" e s  s p"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-s_-s-p/#es_sp","text":"val ES_SP: Locale","title":"ES_SP"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-s_-u-s/","text":"barber / app.cash.barber.locale / Locale / ES_US ES_US \u00b6 val ES_US: Locale","title":" e s  u s"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-e-s_-u-s/#es_us","text":"val ES_US: Locale","title":"ES_US"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-f-r_-c-a/","text":"barber / app.cash.barber.locale / Locale / FR_CA FR_CA \u00b6 val FR_CA: Locale","title":" f r  c a"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-f-r_-c-a/#fr_ca","text":"val FR_CA: Locale","title":"FR_CA"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-f-r_-f-r/","text":"barber / app.cash.barber.locale / Locale / FR_FR FR_FR \u00b6 val FR_FR: Locale","title":" f r  f r"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-f-r_-f-r/#fr_fr","text":"val FR_FR: Locale","title":"FR_FR"},{"location":"0.x/barber/app.cash.barber.locale/-locale/-init-/","text":"barber / app.cash.barber.locale / Locale / <init> <init> \u00b6 Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada","title":" init "},{"location":"0.x/barber/app.cash.barber.locale/-locale/-init-/#init","text":"Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.locale/-locale/locale/","text":"barber / app.cash.barber.locale / Locale / locale locale \u00b6 val locale: String","title":"Locale"},{"location":"0.x/barber/app.cash.barber.locale/-locale/locale/#locale","text":"val locale: String","title":"locale"},{"location":"0.x/barber/app.cash.barber.locale/-locale/to-string/","text":"barber / app.cash.barber.locale / Locale / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"0.x/barber/app.cash.barber.locale/-locale/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/barber/app.cash.barber.locale/-locale-resolver/","text":"barber / app.cash.barber.locale / LocaleResolver LocaleResolver \u00b6 interface LocaleResolver Chooses which locale to use given an inventory of available templates. This class is responsible for making difficult policy decisions around which text to show which customers. For example, it may need to decide how to satisfy a request for es-US (Spanish in the USA) given templates for es-ES (Spanish in Spain) and en-US (English in the USA). Functions \u00b6 Name Summary resolve abstract fun resolve(locale: Locale , options: Set < Locale >): Locale open fun <T> resolve(locale: Locale , map: Map < Locale , T ?>): T open fun <S, T> resolve(locale: Locale , table: Table< Locale , S , T >): Map < S , T >","title":"Index"},{"location":"0.x/barber/app.cash.barber.locale/-locale-resolver/#localeresolver","text":"interface LocaleResolver Chooses which locale to use given an inventory of available templates. This class is responsible for making difficult policy decisions around which text to show which customers. For example, it may need to decide how to satisfy a request for es-US (Spanish in the USA) given templates for es-ES (Spanish in Spain) and en-US (English in the USA).","title":"LocaleResolver"},{"location":"0.x/barber/app.cash.barber.locale/-locale-resolver/#functions","text":"Name Summary resolve abstract fun resolve(locale: Locale , options: Set < Locale >): Locale open fun <T> resolve(locale: Locale , map: Map < Locale , T ?>): T open fun <S, T> resolve(locale: Locale , table: Table< Locale , S , T >): Map < S , T >","title":"Functions"},{"location":"0.x/barber/app.cash.barber.locale/-locale-resolver/resolve/","text":"barber / app.cash.barber.locale / LocaleResolver / resolve resolve \u00b6 abstract fun resolve(locale: Locale , options: Set < Locale >): Locale open fun <T> resolve(locale: Locale , map: Map < Locale , T ?>): T open fun <S, T> resolve(locale: Locale , table: Table< Locale , S , T >): Map < S , T >","title":"Resolve"},{"location":"0.x/barber/app.cash.barber.locale/-locale-resolver/resolve/#resolve","text":"abstract fun resolve(locale: Locale , options: Set < Locale >): Locale open fun <T> resolve(locale: Locale , map: Map < Locale , T ?>): T open fun <S, T> resolve(locale: Locale , table: Table< Locale , S , T >): Map < S , T >","title":"resolve"},{"location":"0.x/barber/app.cash.barber.models/","text":"barber / app.cash.barber.models Package app.cash.barber.models \u00b6 Types \u00b6 Name Summary BarberFieldEncoding enum class BarberFieldEncoding Used in BarberField annotation on Document fields to specify the encoding to render using. BarberKey data class BarberKey BarberSignature data class BarberSignature Deterministic signature of the required fields and respective types CompiledDocumentTemplate data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Document interface Document This is a UI object that has the user-presented strings of a document. DocumentData interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. DocumentTemplate data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. HtmlString data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. TemplateToken data class TemplateToken Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate VersionRange data class VersionRange Annotations \u00b6 Name Summary BarberField annotation class BarberField Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding . Extensions for External Classes \u00b6 Name Summary kotlin.collections.Iterable","title":"barber.models"},{"location":"0.x/barber/app.cash.barber.models/#package-appcashbarbermodels","text":"","title":"Package app.cash.barber.models"},{"location":"0.x/barber/app.cash.barber.models/#types","text":"Name Summary BarberFieldEncoding enum class BarberFieldEncoding Used in BarberField annotation on Document fields to specify the encoding to render using. BarberKey data class BarberKey BarberSignature data class BarberSignature Deterministic signature of the required fields and respective types CompiledDocumentTemplate data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Document interface Document This is a UI object that has the user-presented strings of a document. DocumentData interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. DocumentTemplate data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. HtmlString data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. TemplateToken data class TemplateToken Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate VersionRange data class VersionRange","title":"Types"},{"location":"0.x/barber/app.cash.barber.models/#annotations","text":"Name Summary BarberField annotation class BarberField Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding .","title":"Annotations"},{"location":"0.x/barber/app.cash.barber.models/#extensions-for-external-classes","text":"Name Summary kotlin.collections.Iterable","title":"Extensions for External Classes"},{"location":"0.x/barber/app.cash.barber.models/-document/","text":"barber / app.cash.barber.models / Document Document \u00b6 interface Document This is a UI object that has the user-presented strings of a document. It is the output from a DocumentTemplate being rendered with the DocumentTemplate\u2019s corresponding input DocumentData. A Document is medium specific (email, SMS, article\u2026) and can either be the final rendered product (as in for SMS), or as the input object for a final rendering and theming step (HTML Mustache emails). Examples barber/test app.cash.barber.examples.TransactionalEmailDocument barber/test app.cash.barber.examples.TransactionalSmsDocument","title":" document"},{"location":"0.x/barber/app.cash.barber.models/-document/#document","text":"interface Document This is a UI object that has the user-presented strings of a document. It is the output from a DocumentTemplate being rendered with the DocumentTemplate\u2019s corresponding input DocumentData. A Document is medium specific (email, SMS, article\u2026) and can either be the final rendered product (as in for SMS), or as the input object for a final rendering and theming step (HTML Mustache emails). Examples barber/test app.cash.barber.examples.TransactionalEmailDocument barber/test app.cash.barber.examples.TransactionalSmsDocument","title":"Document"},{"location":"0.x/barber/app.cash.barber.models/-barber-field/","text":"barber / app.cash.barber.models / BarberField BarberField \u00b6 annotation class BarberField Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding . Constructors \u00b6 Name Summary <init> BarberField(encoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding . Properties \u00b6 Name Summary encoding val encoding: BarberFieldEncoding","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-barber-field/#barberfield","text":"annotation class BarberField Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding .","title":"BarberField"},{"location":"0.x/barber/app.cash.barber.models/-barber-field/#constructors","text":"Name Summary <init> BarberField(encoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding .","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-barber-field/#properties","text":"Name Summary encoding val encoding: BarberFieldEncoding","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-barber-field/-init-/","text":"barber / app.cash.barber.models / BarberField / <init> <init> \u00b6 BarberField(encoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding .","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-barber-field/-init-/#init","text":"BarberField(encoding: BarberFieldEncoding = BarberFieldEncoding.STRING_HTML) Document fields annotated will be rendered with a MustacheFactory corresponding to the BarberFieldEncoding .","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-barber-field/encoding/","text":"barber / app.cash.barber.models / BarberField / encoding encoding \u00b6 val encoding: BarberFieldEncoding","title":"Encoding"},{"location":"0.x/barber/app.cash.barber.models/-barber-field/encoding/#encoding","text":"val encoding: BarberFieldEncoding","title":"encoding"},{"location":"0.x/barber/app.cash.barber.models/-barber-field-encoding/","text":"barber / app.cash.barber.models / BarberFieldEncoding BarberFieldEncoding \u00b6 enum class BarberFieldEncoding Used in BarberField annotation on Document fields to specify the encoding to render using. Enum Values \u00b6 Name Summary STRING_HTML STRING_PLAINTEXT","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-barber-field-encoding/#barberfieldencoding","text":"enum class BarberFieldEncoding Used in BarberField annotation on Document fields to specify the encoding to render using.","title":"BarberFieldEncoding"},{"location":"0.x/barber/app.cash.barber.models/-barber-field-encoding/#enum-values","text":"Name Summary STRING_HTML STRING_PLAINTEXT","title":"Enum Values"},{"location":"0.x/barber/app.cash.barber.models/-barber-field-encoding/-s-t-r-i-n-g_-h-t-m-l/","text":"barber / app.cash.barber.models / BarberFieldEncoding / STRING_HTML STRING_HTML \u00b6 STRING_HTML","title":" s t r i n g  h t m l"},{"location":"0.x/barber/app.cash.barber.models/-barber-field-encoding/-s-t-r-i-n-g_-h-t-m-l/#string_html","text":"STRING_HTML","title":"STRING_HTML"},{"location":"0.x/barber/app.cash.barber.models/-barber-field-encoding/-s-t-r-i-n-g_-p-l-a-i-n-t-e-x-t/","text":"barber / app.cash.barber.models / BarberFieldEncoding / STRING_PLAINTEXT STRING_PLAINTEXT \u00b6 STRING_PLAINTEXT","title":" s t r i n g  p l a i n t e x t"},{"location":"0.x/barber/app.cash.barber.models/-barber-field-encoding/-s-t-r-i-n-g_-p-l-a-i-n-t-e-x-t/#string_plaintext","text":"STRING_PLAINTEXT","title":"STRING_PLAINTEXT"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/","text":"barber / app.cash.barber.models / BarberKey BarberKey \u00b6 data class BarberKey Constructors \u00b6 Name Summary <init> BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >) BarberKey(templateToken: TemplateToken , document: KClass <out Document >) Properties \u00b6 Name Summary document val document: KClass <out Document > templateToken val templateToken: TemplateToken","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/#barberkey","text":"data class BarberKey","title":"BarberKey"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/#constructors","text":"Name Summary <init> BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >) BarberKey(templateToken: TemplateToken , document: KClass <out Document >)","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/#properties","text":"Name Summary document val document: KClass <out Document > templateToken val templateToken: TemplateToken","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/-init-/","text":"barber / app.cash.barber.models / BarberKey / <init> <init> \u00b6 BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >) BarberKey(templateToken: TemplateToken , document: KClass <out Document >)","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-barber-key/-init-/#init","text":"BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >) BarberKey(templateToken: TemplateToken , document: KClass <out Document >)","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/document/","text":"barber / app.cash.barber.models / BarberKey / document document \u00b6 val document: KClass <out Document >","title":"Document"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/document/#document","text":"val document: KClass <out Document >","title":"document"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/template-token/","text":"barber / app.cash.barber.models / BarberKey / templateToken templateToken \u00b6 val templateToken: TemplateToken","title":"Template token"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/template-token/#templatetoken","text":"val templateToken: TemplateToken","title":"templateToken"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/","text":"barber / app.cash.barber.models / BarberSignature BarberSignature \u00b6 data class BarberSignature Deterministic signature of the required fields and respective types Constructors \u00b6 Name Summary <init> BarberSignature(signature: String ) BarberSignature(fields: Map < String , <ERROR CLASS>>)``BarberSignature(signature: String , fields: Map < String , <ERROR CLASS>>) Deterministic signature of the required fields and respective types Properties \u00b6 Name Summary fields val fields: Map < String , <ERROR CLASS>> signature val signature: String Functions \u00b6 Name Summary canSatisfy fun canSatisfy(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature including types (ie. superset of fields) canSatisfyNaively fun canSatisfyNaively(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature ignorant of types (ie. superset of fields) Companion Object Functions \u00b6 Name Summary getBarberSignature fun DocumentData .getBarberSignature(): <ERROR CLASS> fun KClass <*>.getBarberSignature(): BarberSignature fun DocumentData .getBarberSignature(): BarberSignature fun Document .getBarberSignature(): BarberSignature getNaiveSourceBarberSignature fun DocumentTemplate .getNaiveSourceBarberSignature(mustacheFactory: MustacheFactory): <ERROR CLASS> BarberSignature is designated as naive since no type can be parsed from the code, so it is always String","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/#barbersignature","text":"data class BarberSignature Deterministic signature of the required fields and respective types","title":"BarberSignature"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/#constructors","text":"Name Summary <init> BarberSignature(signature: String ) BarberSignature(fields: Map < String , <ERROR CLASS>>)``BarberSignature(signature: String , fields: Map < String , <ERROR CLASS>>) Deterministic signature of the required fields and respective types","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/#properties","text":"Name Summary fields val fields: Map < String , <ERROR CLASS>> signature val signature: String","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/#functions","text":"Name Summary canSatisfy fun canSatisfy(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature including types (ie. superset of fields) canSatisfyNaively fun canSatisfyNaively(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature ignorant of types (ie. superset of fields)","title":"Functions"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/#companion-object-functions","text":"Name Summary getBarberSignature fun DocumentData .getBarberSignature(): <ERROR CLASS> fun KClass <*>.getBarberSignature(): BarberSignature fun DocumentData .getBarberSignature(): BarberSignature fun Document .getBarberSignature(): BarberSignature getNaiveSourceBarberSignature fun DocumentTemplate .getNaiveSourceBarberSignature(mustacheFactory: MustacheFactory): <ERROR CLASS> BarberSignature is designated as naive since no type can be parsed from the code, so it is always String","title":"Companion Object Functions"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/-init-/","text":"barber / app.cash.barber.models / BarberSignature / <init> <init> \u00b6 BarberSignature(signature: String ) BarberSignature(fields: Map < String , <ERROR CLASS>>)``BarberSignature(signature: String , fields: Map < String , <ERROR CLASS>>) Deterministic signature of the required fields and respective types","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/-init-/#init","text":"BarberSignature(signature: String ) BarberSignature(fields: Map < String , <ERROR CLASS>>)``BarberSignature(signature: String , fields: Map < String , <ERROR CLASS>>) Deterministic signature of the required fields and respective types","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/can-satisfy-naively/","text":"barber / app.cash.barber.models / BarberSignature / canSatisfyNaively canSatisfyNaively \u00b6 fun canSatisfyNaively(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature ignorant of types (ie. superset of fields)","title":"Can satisfy naively"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/can-satisfy-naively/#cansatisfynaively","text":"fun canSatisfyNaively(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature ignorant of types (ie. superset of fields)","title":"canSatisfyNaively"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/can-satisfy/","text":"barber / app.cash.barber.models / BarberSignature / canSatisfy canSatisfy \u00b6 fun canSatisfy(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature including types (ie. superset of fields)","title":"Can satisfy"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/can-satisfy/#cansatisfy","text":"fun canSatisfy(target: BarberSignature ): Boolean Return true if this signature can satisfy the target signature including types (ie. superset of fields)","title":"canSatisfy"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/fields/","text":"barber / app.cash.barber.models / BarberSignature / fields fields \u00b6 val fields: Map < String , <ERROR CLASS>>","title":"Fields"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/fields/#fields","text":"val fields: Map < String , <ERROR CLASS>>","title":"fields"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/get-barber-signature/","text":"barber / app.cash.barber.models / BarberSignature / getBarberSignature getBarberSignature \u00b6 fun DocumentData .getBarberSignature(): <ERROR CLASS> fun KClass <*>.getBarberSignature(): BarberSignature fun DocumentData .getBarberSignature(): BarberSignature fun Document .getBarberSignature(): BarberSignature","title":"Get barber signature"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/get-barber-signature/#getbarbersignature","text":"fun DocumentData .getBarberSignature(): <ERROR CLASS> fun KClass <*>.getBarberSignature(): BarberSignature fun DocumentData .getBarberSignature(): BarberSignature fun Document .getBarberSignature(): BarberSignature","title":"getBarberSignature"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/get-naive-source-barber-signature/","text":"barber / app.cash.barber.models / BarberSignature / getNaiveSourceBarberSignature getNaiveSourceBarberSignature \u00b6 fun DocumentTemplate .getNaiveSourceBarberSignature(mustacheFactory: MustacheFactory): <ERROR CLASS> BarberSignature is designated as naive since no type can be parsed from the code, so it is always String","title":"Get naive source barber signature"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/get-naive-source-barber-signature/#getnaivesourcebarbersignature","text":"fun DocumentTemplate .getNaiveSourceBarberSignature(mustacheFactory: MustacheFactory): <ERROR CLASS> BarberSignature is designated as naive since no type can be parsed from the code, so it is always String","title":"getNaiveSourceBarberSignature"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/signature/","text":"barber / app.cash.barber.models / BarberSignature / signature signature \u00b6 val signature: String","title":"Signature"},{"location":"0.x/barber/app.cash.barber.models/-barber-signature/signature/#signature","text":"val signature: String","title":"signature"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate CompiledDocumentTemplate \u00b6 data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Constructors \u00b6 Name Summary <init> CompiledDocumentTemplate(fields: Table< String , KClass <out Document >, Mustache?>, targets: Set < KClass <out Document >>, version: Long ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Properties \u00b6 Name Summary fields val fields: Table< String , KClass <out Document >, Mustache?> targets val targets: Set < KClass <out Document >> version val version: Long Functions \u00b6 Name Summary reducedFieldCodeMap fun reducedFieldCodeMap(): Map < String !, Set < String >> Return map of fieldName to set of Mustache codes in the field template reducedFieldCodeSet fun reducedFieldCodeSet(): Set < String > Returns set of all Mustache codes in DocumentTemplate Companion Object Functions \u00b6 Name Summary prettyPrint fun DocumentTemplate .prettyPrint(): String reduceToValuesSet fun Map <*, Set < String >>.reduceToValuesSet(): Set < String > Returns values from a Map as an aggregated set","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#compileddocumenttemplate","text":"data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":"CompiledDocumentTemplate"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#constructors","text":"Name Summary <init> CompiledDocumentTemplate(fields: Table< String , KClass <out Document >, Mustache?>, targets: Set < KClass <out Document >>, version: Long ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#properties","text":"Name Summary fields val fields: Table< String , KClass <out Document >, Mustache?> targets val targets: Set < KClass <out Document >> version val version: Long","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#functions","text":"Name Summary reducedFieldCodeMap fun reducedFieldCodeMap(): Map < String !, Set < String >> Return map of fieldName to set of Mustache codes in the field template reducedFieldCodeSet fun reducedFieldCodeSet(): Set < String > Returns set of all Mustache codes in DocumentTemplate","title":"Functions"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#companion-object-functions","text":"Name Summary prettyPrint fun DocumentTemplate .prettyPrint(): String reduceToValuesSet fun Map <*, Set < String >>.reduceToValuesSet(): Set < String > Returns values from a Map as an aggregated set","title":"Companion Object Functions"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/-init-/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / <init> <init> \u00b6 CompiledDocumentTemplate(fields: Table< String , KClass <out Document >, Mustache?>, targets: Set < KClass <out Document >>, version: Long ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/-init-/#init","text":"CompiledDocumentTemplate(fields: Table< String , KClass <out Document >, Mustache?>, targets: Set < KClass <out Document >>, version: Long ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/fields/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / fields fields \u00b6 val fields: Table< String , KClass <out Document >, Mustache?>","title":"Fields"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/fields/#fields","text":"val fields: Table< String , KClass <out Document >, Mustache?>","title":"fields"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/pretty-print/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / prettyPrint prettyPrint \u00b6 fun DocumentTemplate .prettyPrint(): String","title":"Pretty print"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/pretty-print/#prettyprint","text":"fun DocumentTemplate .prettyPrint(): String","title":"prettyPrint"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/reduce-to-values-set/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / reduceToValuesSet reduceToValuesSet \u00b6 fun Map <*, Set < String >>.reduceToValuesSet(): Set < String > Returns values from a Map as an aggregated set","title":"Reduce to values set"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/reduce-to-values-set/#reducetovaluesset","text":"fun Map <*, Set < String >>.reduceToValuesSet(): Set < String > Returns values from a Map as an aggregated set","title":"reduceToValuesSet"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/reduced-field-code-map/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / reducedFieldCodeMap reducedFieldCodeMap \u00b6 fun reducedFieldCodeMap(): Map < String !, Set < String >> Return map of fieldName to set of Mustache codes in the field template","title":"Reduced field code map"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/reduced-field-code-map/#reducedfieldcodemap","text":"fun reducedFieldCodeMap(): Map < String !, Set < String >> Return map of fieldName to set of Mustache codes in the field template","title":"reducedFieldCodeMap"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/reduced-field-code-set/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / reducedFieldCodeSet reducedFieldCodeSet \u00b6 fun reducedFieldCodeSet(): Set < String > Returns set of all Mustache codes in DocumentTemplate","title":"Reduced field code set"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/reduced-field-code-set/#reducedfieldcodeset","text":"fun reducedFieldCodeSet(): Set < String > Returns set of all Mustache codes in DocumentTemplate","title":"reducedFieldCodeSet"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/targets/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / targets targets \u00b6 val targets: Set < KClass <out Document >>","title":"Targets"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/targets/#targets","text":"val targets: Set < KClass <out Document >>","title":"targets"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/version/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / version version \u00b6 val version: Long","title":"Version"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/version/#version","text":"val version: Long","title":"version"},{"location":"0.x/barber/app.cash.barber.models/-document-data/","text":"barber / app.cash.barber.models / DocumentData DocumentData \u00b6 interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. Examples: data class RecipientReceipt( val amount: Money, val sender: String, val depositExpectedAt: Instant, val cancelUrl: HttpUrl ) : DocumentData data class AutoAddCashFailed( val amount: Money, val reason: String ) : DocumentData data class PaymentLateHelpArticle( val amount: Money, val displayId: String, val depositExpectedAt: Instant ) : DocumentData Instances of DocumentData are used to fill the templates in a DocumentTemplate and produce a Document object. A Barber.render function consumes the Document object and renders the final document, SMS, email, or article. Copy models do not have a locale. Functions \u00b6 Name Summary toProto open fun toProto(): <ERROR CLASS>","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-document-data/#documentdata","text":"interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. Examples: data class RecipientReceipt( val amount: Money, val sender: String, val depositExpectedAt: Instant, val cancelUrl: HttpUrl ) : DocumentData data class AutoAddCashFailed( val amount: Money, val reason: String ) : DocumentData data class PaymentLateHelpArticle( val amount: Money, val displayId: String, val depositExpectedAt: Instant ) : DocumentData Instances of DocumentData are used to fill the templates in a DocumentTemplate and produce a Document object. A Barber.render function consumes the Document object and renders the final document, SMS, email, or article. Copy models do not have a locale.","title":"DocumentData"},{"location":"0.x/barber/app.cash.barber.models/-document-data/#functions","text":"Name Summary toProto open fun toProto(): <ERROR CLASS>","title":"Functions"},{"location":"0.x/barber/app.cash.barber.models/-document-data/to-proto/","text":"barber / app.cash.barber.models / DocumentData / toProto toProto \u00b6 open fun toProto(): <ERROR CLASS>","title":"To proto"},{"location":"0.x/barber/app.cash.barber.models/-document-data/to-proto/#toproto","text":"open fun toProto(): <ERROR CLASS>","title":"toProto"},{"location":"0.x/barber/app.cash.barber.models/-document-template/","text":"barber / app.cash.barber.models / DocumentTemplate DocumentTemplate \u00b6 data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. Constructors \u00b6 Name Summary <init> DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale , version: Long = 1) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. Properties \u00b6 Name Summary fields val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values locale val locale: Locale Barber Locale that scopes DocumentTemplate to a languages/country Locale source val source: KClass <out DocumentData > KClass of DocumentData that can fill the templates in fields targets val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render version val version: Long Increments for newer versions of the templates Functions \u00b6 Name Summary toProto fun toProto(): <ERROR CLASS> toString fun toString(): String","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#documenttemplate","text":"data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields.","title":"DocumentTemplate"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#constructors","text":"Name Summary <init> DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale , version: Long = 1) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields.","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#properties","text":"Name Summary fields val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values locale val locale: Locale Barber Locale that scopes DocumentTemplate to a languages/country Locale source val source: KClass <out DocumentData > KClass of DocumentData that can fill the templates in fields targets val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render version val version: Long Increments for newer versions of the templates","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#functions","text":"Name Summary toProto fun toProto(): <ERROR CLASS> toString fun toString(): String","title":"Functions"},{"location":"0.x/barber/app.cash.barber.models/-document-template/-init-/","text":"barber / app.cash.barber.models / DocumentTemplate / <init> <init> \u00b6 DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale , version: Long = 1) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields.","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-document-template/-init-/#init","text":"DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale , version: Long = 1) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields.","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-document-template/fields/","text":"barber / app.cash.barber.models / DocumentTemplate / fields fields \u00b6 val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values","title":"Fields"},{"location":"0.x/barber/app.cash.barber.models/-document-template/fields/#fields","text":"val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values","title":"fields"},{"location":"0.x/barber/app.cash.barber.models/-document-template/locale/","text":"barber / app.cash.barber.models / DocumentTemplate / locale locale \u00b6 val locale: Locale Barber Locale that scopes DocumentTemplate to a languages/country Locale","title":"Locale"},{"location":"0.x/barber/app.cash.barber.models/-document-template/locale/#locale","text":"val locale: Locale Barber Locale that scopes DocumentTemplate to a languages/country Locale","title":"locale"},{"location":"0.x/barber/app.cash.barber.models/-document-template/source/","text":"barber / app.cash.barber.models / DocumentTemplate / source source \u00b6 val source: KClass <out DocumentData > KClass of DocumentData that can fill the templates in fields","title":"Source"},{"location":"0.x/barber/app.cash.barber.models/-document-template/source/#source","text":"val source: KClass <out DocumentData > KClass of DocumentData that can fill the templates in fields","title":"source"},{"location":"0.x/barber/app.cash.barber.models/-document-template/targets/","text":"barber / app.cash.barber.models / DocumentTemplate / targets targets \u00b6 val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render","title":"Targets"},{"location":"0.x/barber/app.cash.barber.models/-document-template/targets/#targets","text":"val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render","title":"targets"},{"location":"0.x/barber/app.cash.barber.models/-document-template/to-proto/","text":"barber / app.cash.barber.models / DocumentTemplate / toProto toProto \u00b6 fun toProto(): <ERROR CLASS>","title":"To proto"},{"location":"0.x/barber/app.cash.barber.models/-document-template/to-proto/#toproto","text":"fun toProto(): <ERROR CLASS>","title":"toProto"},{"location":"0.x/barber/app.cash.barber.models/-document-template/to-string/","text":"barber / app.cash.barber.models / DocumentTemplate / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"0.x/barber/app.cash.barber.models/-document-template/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/barber/app.cash.barber.models/-document-template/version/","text":"barber / app.cash.barber.models / DocumentTemplate / version version \u00b6 val version: Long Increments for newer versions of the templates","title":"Version"},{"location":"0.x/barber/app.cash.barber.models/-document-template/version/#version","text":"val version: Long Increments for newer versions of the templates","title":"version"},{"location":"0.x/barber/app.cash.barber.models/-html-string/","text":"barber / app.cash.barber.models / HtmlString HtmlString \u00b6 data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. Constructors \u00b6 Name Summary <init> HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. Properties \u00b6 Name Summary html val html: String","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-html-string/#htmlstring","text":"data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":"HtmlString"},{"location":"0.x/barber/app.cash.barber.models/-html-string/#constructors","text":"Name Summary <init> HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-html-string/#properties","text":"Name Summary html val html: String","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-html-string/-init-/","text":"barber / app.cash.barber.models / HtmlString / <init> <init> \u00b6 HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-html-string/-init-/#init","text":"HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-html-string/html/","text":"barber / app.cash.barber.models / HtmlString / html html \u00b6 val html: String","title":"Html"},{"location":"0.x/barber/app.cash.barber.models/-html-string/html/#html","text":"val html: String","title":"html"},{"location":"0.x/barber/app.cash.barber.models/-template-token/","text":"barber / app.cash.barber.models / TemplateToken TemplateToken \u00b6 data class TemplateToken Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate Constructors \u00b6 Name Summary <init> TemplateToken(token: String ) Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate Properties \u00b6 Name Summary token val token: String Functions \u00b6 Name Summary toString fun toString(): String Companion Object Functions \u00b6 Name Summary getTemplateToken fun KClass <out DocumentData >.getTemplateToken(): TemplateToken Provides interoperability with DocumentData API of always having a templateToken string fun <ERROR CLASS>.getTemplateToken(): TemplateToken","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-template-token/#templatetoken","text":"data class TemplateToken Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate","title":"TemplateToken"},{"location":"0.x/barber/app.cash.barber.models/-template-token/#constructors","text":"Name Summary <init> TemplateToken(token: String ) Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-template-token/#properties","text":"Name Summary token val token: String","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-template-token/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"0.x/barber/app.cash.barber.models/-template-token/#companion-object-functions","text":"Name Summary getTemplateToken fun KClass <out DocumentData >.getTemplateToken(): TemplateToken Provides interoperability with DocumentData API of always having a templateToken string fun <ERROR CLASS>.getTemplateToken(): TemplateToken","title":"Companion Object Functions"},{"location":"0.x/barber/app.cash.barber.models/-template-token/-init-/","text":"barber / app.cash.barber.models / TemplateToken / <init> <init> \u00b6 TemplateToken(token: String ) Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-template-token/-init-/#init","text":"TemplateToken(token: String ) Identifies a semantic template and is shared across multiple versions and locales of DocumentData and DocumentTemplate","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-template-token/get-template-token/","text":"barber / app.cash.barber.models / TemplateToken / getTemplateToken getTemplateToken \u00b6 fun KClass <out DocumentData >.getTemplateToken(): TemplateToken Provides interoperability with DocumentData API of always having a templateToken string Class: AppLoginDocumentData TemplateToken: appLogin fun <ERROR CLASS>.getTemplateToken(): TemplateToken","title":"Get template token"},{"location":"0.x/barber/app.cash.barber.models/-template-token/get-template-token/#gettemplatetoken","text":"fun KClass <out DocumentData >.getTemplateToken(): TemplateToken Provides interoperability with DocumentData API of always having a templateToken string Class: AppLoginDocumentData TemplateToken: appLogin fun <ERROR CLASS>.getTemplateToken(): TemplateToken","title":"getTemplateToken"},{"location":"0.x/barber/app.cash.barber.models/-template-token/to-string/","text":"barber / app.cash.barber.models / TemplateToken / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"0.x/barber/app.cash.barber.models/-template-token/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/barber/app.cash.barber.models/-template-token/token/","text":"barber / app.cash.barber.models / TemplateToken / token token \u00b6 val token: String","title":"Token"},{"location":"0.x/barber/app.cash.barber.models/-template-token/token/#token","text":"val token: String","title":"token"},{"location":"0.x/barber/app.cash.barber.models/-version-range/","text":"barber / app.cash.barber.models / VersionRange VersionRange \u00b6 data class VersionRange Constructors \u00b6 Name Summary <init> VersionRange(min: Long , max: Long ) Properties \u00b6 Name Summary max val max: Long min val min: Long Functions \u00b6 Name Summary supports fun supports(version: Long ): Boolean Companion Object Functions \u00b6 Name Summary asVersionRanges fun Set < Long >.asVersionRanges(): Set < VersionRange > supports fun Set < VersionRange >.supports(version: Long ): Boolean","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/-version-range/#versionrange","text":"data class VersionRange","title":"VersionRange"},{"location":"0.x/barber/app.cash.barber.models/-version-range/#constructors","text":"Name Summary <init> VersionRange(min: Long , max: Long )","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-version-range/#properties","text":"Name Summary max val max: Long min val min: Long","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-version-range/#functions","text":"Name Summary supports fun supports(version: Long ): Boolean","title":"Functions"},{"location":"0.x/barber/app.cash.barber.models/-version-range/#companion-object-functions","text":"Name Summary asVersionRanges fun Set < Long >.asVersionRanges(): Set < VersionRange > supports fun Set < VersionRange >.supports(version: Long ): Boolean","title":"Companion Object Functions"},{"location":"0.x/barber/app.cash.barber.models/-version-range/-init-/","text":"barber / app.cash.barber.models / VersionRange / <init> <init> \u00b6 VersionRange(min: Long , max: Long )","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-version-range/-init-/#init","text":"VersionRange(min: Long , max: Long )","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-version-range/as-version-ranges/","text":"barber / app.cash.barber.models / VersionRange / asVersionRanges asVersionRanges \u00b6 fun Set < Long >.asVersionRanges(): Set < VersionRange >","title":"As version ranges"},{"location":"0.x/barber/app.cash.barber.models/-version-range/as-version-ranges/#asversionranges","text":"fun Set < Long >.asVersionRanges(): Set < VersionRange >","title":"asVersionRanges"},{"location":"0.x/barber/app.cash.barber.models/-version-range/max/","text":"barber / app.cash.barber.models / VersionRange / max max \u00b6 val max: Long","title":"Max"},{"location":"0.x/barber/app.cash.barber.models/-version-range/max/#max","text":"val max: Long","title":"max"},{"location":"0.x/barber/app.cash.barber.models/-version-range/min/","text":"barber / app.cash.barber.models / VersionRange / min min \u00b6 val min: Long","title":"Min"},{"location":"0.x/barber/app.cash.barber.models/-version-range/min/#min","text":"val min: Long","title":"min"},{"location":"0.x/barber/app.cash.barber.models/-version-range/supports/","text":"barber / app.cash.barber.models / VersionRange / supports supports \u00b6 fun supports(version: Long ): Boolean fun Set < VersionRange >.supports(version: Long ): Boolean","title":"Supports"},{"location":"0.x/barber/app.cash.barber.models/-version-range/supports/#supports","text":"fun supports(version: Long ): Boolean fun Set < VersionRange >.supports(version: Long ): Boolean","title":"supports"},{"location":"0.x/barber/app.cash.barber.models/kotlin.collections.-iterable/","text":"barber / app.cash.barber.models / kotlin.collections.Iterable Extensions for kotlin.collections.Iterable \u00b6 Name Summary mapToMaps fun <T, K, V> Iterable < T >.mapToMaps(entryFactory: ( T ) -> Map < K , V >): Map < K , V >","title":"Index"},{"location":"0.x/barber/app.cash.barber.models/kotlin.collections.-iterable/#extensions-for-kotlincollectionsiterable","text":"Name Summary mapToMaps fun <T, K, V> Iterable < T >.mapToMaps(entryFactory: ( T ) -> Map < K , V >): Map < K , V >","title":"Extensions for kotlin.collections.Iterable"},{"location":"0.x/barber/app.cash.barber.models/kotlin.collections.-iterable/map-to-maps/","text":"barber / app.cash.barber.models / kotlin.collections.Iterable / mapToMaps mapToMaps \u00b6 fun <T, K, V> Iterable < T >.mapToMaps(entryFactory: ( T ) -> Map < K , V >): Map < K , V >","title":"Map to maps"},{"location":"0.x/barber/app.cash.barber.models/kotlin.collections.-iterable/map-to-maps/#maptomaps","text":"fun <T, K, V> Iterable < T >.mapToMaps(entryFactory: ( T ) -> Map < K , V >): Map < K , V >","title":"mapToMaps"}]}